// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum ActionType {
    review
    report
    block
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    isAdmim       Boolean

    accounts Account[]
    sessions Session[]

    EventsCreated    Event[]
    ActionTarget  Action[] @relation("target")
    ActionCreator Action[] @relation("creator")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Location {
    id      String @id @default(cuid())
    name    String
    address String
    long    Float
    lat     Float
    image   String

    Event            Event[]
    Action           Action[]
    EvenTypeLocation EvenTypeLocation[]
}

model EventType {
    id              String  @id @default(cuid())
    text            String
    icon            String
    isIndoor        Boolean
    avarageDuration Float   @default(0.5)

    Event            Event[]
    EvenTypeLocation EvenTypeLocation[]
}

model Event {
    id      String   @id @default(cuid())
    name    String
    date    DateTime
    maxPers Int
    price   Float

    eventType   EventType @relation(fields: [eventTypeId], references: [id])
    location    Location  @relation(fields: [locationId], references: [id])
    creator     User      @relation(fields: [creatorId], references: [id])
    locationId  String
    creatorId   String
    eventTypeId String
}

model Action {
    id   String     @id @default(cuid())
    type ActionType
    text String

    target User @relation("target", fields: [targetId], references: [id])

    location   Location @relation(fields: [locationId], references: [id])
    creator    User     @relation("creator", fields: [userId], references: [id])
    userId     String
    locationId String
    targetId   String
}

model EvenTypeLocation {
    eventType   EventType @relation(fields: [eventTypeId], references: [id])
    location    Location  @relation(fields: [locationId], references: [id])
    eventTypeId String
    locationId  String
    @@unique([eventTypeId,locationId])
}
